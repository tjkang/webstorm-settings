<templateSet group="user">
  <template name="rncontainer" value="import React, { ReactNode } from 'react';&#10;import { View } from 'react-native';&#10;import NavigatorComponent, { INavigatorComponentProps } from 'components/NavigatorComponent';&#10;import { NavigationScreenConfig, NavigationScreenOptions, NavigationScreenProps } from 'react-navigation';&#10;import { connect } from 'react-redux';&#10;import DevUtil from 'utils/DevUtil';&#10;import styles from './styles';&#10;&#10;interface IConnectStateProps {}&#10;&#10;type IProps = I$ComponentName$Props &amp; IConnectStateProps;&#10;&#10;interface IState {}&#10;&#10;class $ComponentName$ extends NavigatorComponent&lt;IProps, IState&gt; {&#10;  static defaultProps: Partial&lt;IProps&gt; = {};&#10;&#10;  readonly state: IState = {};&#10;&#10;  static navigationOptions(ignoredProps: NavigationScreenProps): NavigationScreenConfig&lt;NavigationScreenOptions&gt; {&#10;    return {};&#10;  }&#10;&#10;  constructor(props: INavigatorComponentProps &amp; I$ComponentName$Props) {&#10;    super(props);&#10;  }&#10;&#10;  componentDidMount(): void {}&#10;&#10;  componentWillUnmount(): void {&#10;    super.componentWillUnmount();&#10;  }&#10;&#10;  render(): ReactNode {&#10;    return (&#10;      &lt;View style={styles.container}&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;}&#10;&#10;export default DevUtil.withMappedNavigationParams(&#10;  connect&lt;IConnectStateProps, {}, INavigatorComponentProps&gt;(state =&gt; ({}))($ComponentName$),&#10;);&#10;" description="Creates a React Native component class with Navigator and connected to Redux" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_CLASS" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rnpcomponent" value="import React, { PureComponent, ReactNode } from 'react';&#10;import { View } from 'react-native';&#10;import styles from './$ComponentName$.styles';&#10;&#10;interface IProps {}&#10;&#10;interface IState {}&#10;&#10;export default class $ComponentName$ extends PureComponent&lt;IProps, IState&gt; {&#10;  static defaultProps: Partial&lt;IProps&gt; = {};&#10;&#10;  constructor(props: IProps) {&#10;    super(props);&#10;&#10;    this.state = {};&#10;  }&#10;&#10;  render(): ReactNode {&#10;    return (&#10;      &lt;View style={styles.container}&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;}&#10;" description="Creates a React Native pureComponent" toReformat="false" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rncomponent" value="import React, { ReactNode } from 'react';&#10;import { View } from 'react-native';&#10;import NavigatorComponent, { INavigatorComponentProps } from 'components/NavigatorComponent';&#10;import { NavigationScreenConfig, NavigationScreenOptions, NavigationScreenProps } from 'react-navigation';&#10;import DevUtil from 'utils/DevUtil';&#10;import styles from './styles';&#10;&#10;interface IProps {}&#10;&#10;interface IState {}&#10;&#10;class $ComponentName$ extends NavigatorComponent&lt;IProps, IState&gt; {&#10;  static defaultProps: Partial&lt;IProps&gt; = {};&#10;&#10;  readonly state: IState = {};&#10;&#10;  static navigationOptions(ignoredProps: NavigationScreenProps): NavigationScreenConfig&lt;NavigationScreenOptions&gt; {&#10;    return {};&#10;  }&#10;&#10;  constructor(props: INavigatorComponentProps &amp; IProps) {&#10;    super(props);&#10;  }&#10;&#10;  componentDidMount(): void {}&#10;&#10;  componentWillUnmount(): void {&#10;    super.componentWillUnmount();&#10;  }&#10;&#10;  render(): ReactNode {&#10;    return (&#10;      &lt;View style={styles.container}&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;}&#10;&#10;export default DevUtil.withMappedNavigationParams($ComponentName$);&#10;" description="Creates a React Native component class with Navigator" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_CLASS" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rnstyle" value="import { StyleSheet } from 'react-native';&#10;import { Colors, Fonts } from 'rsconstants';&#10;import { getPixel } from 'utils/viewport';&#10;&#10;export default StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;  },&#10;});" description="Creates a React Native Stylesheet" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rnfc" value="import React, { memo } from 'react';&#10;import { View, StyleSheet } from 'react-native';&#10;&#10;interface IProps {&#10;}&#10;&#10;const defaultProps: Partial&lt;IProps&gt; = {};&#10;&#10;const $ComponentName$ = (props: IProps): JSX.Element =&gt; {&#10;  function someFunc(): void {}&#10;&#10;  return &lt;View /&gt;;&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  container: {},&#10;});&#10;&#10;$ComponentName$.defaultProps = defaultProps;&#10;&#10;export default memo($ComponentName$);&#10;" description="Creates a Function React Native component" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rnstyle-ym" value="import { StyleSheet } from 'react-native';&#10;import { Colors, Fonts } from 'ymconstants';&#10;import { getPixel } from 'utils/Viewport';&#10;&#10;export default StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;  },&#10;});" description="Creates a React Native Stylesheet" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rncomponent-ym" value="import { ThemedView } from 'components/atoms';&#10;import React, { ReactNode } from 'react';&#10;import { View } from 'react-native';&#10;import NavigatorComponent, { INavigatorComponentProps } from 'navigations/components/NavigatorComponent';&#10;import { NavigationStackScreenProps, NavigationStackOptions } from 'react-navigation-stack';&#10;import DevUtil from 'utils/DevUtil';&#10;import styles from './styles';&#10;&#10;interface IProps {}&#10;&#10;interface IState {}&#10;&#10;class $ComponentName$ extends NavigatorComponent&lt;IProps, IState&gt; {&#10;  static defaultProps: Partial&lt;IProps&gt; = {};&#10;&#10;  readonly state: IState = {};&#10;&#10;  static navigationOptions(ignoredProps: NavigationStackScreenProps): NavigationStackOptions {&#10;    return {};&#10;  }&#10;&#10;  constructor(props: INavigatorComponentProps &amp; IProps) {&#10;    super(props);&#10;  }&#10;&#10;  componentDidMount(): void {}&#10;&#10;  componentWillUnmount(): void {&#10;    super.componentWillUnmount();&#10;  }&#10;&#10;  render(): ReactNode {&#10;    return (&#10;      &lt;ThemedView style={styles.container}&gt;&#10;      &lt;/ThemedView&gt;&#10;    );&#10;  }&#10;}&#10;&#10;export default DevUtil.withMappedNavigationParams($ComponentName$);&#10;" description="Creates a React Native component class with Navigator" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_CLASS" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rncontainer-ym" value="import { ThemedView } from 'components/atoms';&#10;import React, { ReactNode } from 'react';&#10;import { View } from 'react-native';&#10;import NavigatorComponent, { INavigatorComponentProps } from 'navigations/components/NavigatorComponent';&#10;import { NavigationStackScreenProps, NavigationStackOptions } from 'react-navigation-stack';&#10;import { connect } from 'react-redux';&#10;import DevUtil from 'utils/DevUtil';&#10;import styles from './styles';&#10;&#10;interface IConnectStateProps {}&#10;&#10;type IProps = I$ComponentName$Props &amp; IConnectStateProps;&#10;&#10;interface IState {}&#10;&#10;class $ComponentName$ extends NavigatorComponent&lt;IProps, IState&gt; {&#10;  static defaultProps: Partial&lt;IProps&gt; = {};&#10;&#10;  readonly state: IState = {};&#10;&#10;  static navigationOptions(ignoredProps: NavigationStackScreenProps): NavigationStackOptions {&#10;    return {};&#10;  }&#10;&#10;  constructor(props: INavigatorComponentProps &amp; I$ComponentName$Props) {&#10;    super(props);&#10;  }&#10;&#10;  componentDidMount(): void {}&#10;&#10;  componentWillUnmount(): void {&#10;    super.componentWillUnmount();&#10;  }&#10;&#10;  render(): ReactNode {&#10;    return (&#10;      &lt;ThemedView style={styles.container}&gt;&#10;      &lt;/ThemedView&gt;&#10;    );&#10;  }&#10;}&#10;&#10;export default DevUtil.withMappedNavigationParams(&#10;  connect&lt;IConnectStateProps, {}, INavigatorComponentProps&gt;(state =&gt; ({}))($ComponentName$),&#10;);&#10;" description="Creates a React Native component class with Navigator and connected to Redux" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_CLASS" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rnfcc" value="import useNavigationLifeCycle from 'hooks/useNavigationLifeCycle';&#10;import React, { memo } from 'react';&#10;import { View, StyleSheet } from 'react-native';&#10;import { NavigationScreenProp, NavigationRoute } from 'react-navigation';&#10;&#10;interface INavigationProps {&#10;  navigation: NavigationScreenProp&lt;NavigationRoute&gt;;&#10;}&#10;&#10;type IProps = INavigationProps;&#10;&#10;const defaultProps: Partial&lt;IProps&gt; = {};&#10;&#10;const $ComponentName$ = (props: IProps): JSX.Element =&gt; {&#10;  useNavigationLifeCycle(props.navigation);&#10;&#10;  function someFunc(): void {}&#10;&#10;  return &lt;View /&gt;;&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  container: {},&#10;});&#10;&#10;$ComponentName$.defaultProps = defaultProps;&#10;&#10;export default memo($ComponentName$);&#10;" description="Creates a Function React Native Container with Navigator" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>