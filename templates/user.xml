<templateSet group="user">
  <template name="rncontainer" value="import React, { ReactNode } from 'react';&#10;import { View } from 'react-native';&#10;import { Navigator } from 'react-native-navigation';&#10;&#10;import NavigatorComponent from 'components/NavigatorComponent';&#10;import { statusBarHeight } from 'utils/viewport';&#10;&#10;import styles from './styles';&#10;&#10;interface IProps {&#10;  navigator: Navigator;&#10;}&#10;&#10;export default class $ComponentName$ extends NavigatorComponent {&#10;  static navigatorStyle = {&#10;    statusBarTextColorScheme: 'light',&#10;    navBarHidden: true,&#10;    drawUnderNavBar: true,&#10;&#10;    // Android&#10;    topBarElevationShadowEnabled: false,&#10;    drawUnderStatusBar: true,&#10;    navBarTitleTextCentered: true,&#10;    statusBarColor: 'transparent',&#10;    navBarTopPadding: statusBarHeight,&#10;  };&#10;&#10;  static defaultProps: Partial&lt;IProps&gt; = {}&#10;&#10;  constructor(props: IProps) {&#10;    super(props);&#10;  }&#10;&#10;  componentDidMount(): void {&#10;  }&#10;&#10;  componentWillUnmount(): void {&#10;  }&#10;&#10;  componentDidCatch(error: Error): void {&#10;  }&#10;&#10;  render(): ReactNode {&#10;    return (&#10;      &lt;View style={styles.container}&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;}&#10;" description="Creates a React Native component class with Navigation" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_CLASS" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rnpcomponent" value="import React, { PureComponent, ReactNode } from 'react';&#10;import { View } from 'react-native';&#10;&#10;import styles from './$ComponentName$.styles';&#10;&#10;interface IProps {}&#10;&#10;export default class $ComponentName$ extends PureComponent&lt;IProps&gt; {&#10;  static defaultProps: Partial&lt;IProps&gt; = {};&#10;&#10;  constructor(props: IProps) {&#10;    super(props);&#10;  }&#10;&#10;  render(): ReactNode {&#10;    return (&#10;      &lt;View style={styles.container}&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;}&#10;" description="Creates a React Native pureComponent" toReformat="false" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rnsfc" value="import React, { SFC, ReactNode } from 'react';&#10;import { StyleProp, View, ViewStyle } from 'react-native';&#10;&#10;import styles from './$ComponentName$.styles';&#10;&#10;interface IProps {&#10;  style?: StyleProp&lt;ViewStyle&gt;;&#10;}&#10;&#10;const defaultProps: Partial&lt;IProps&gt; = {&#10;  style: undefined,&#10;};&#10;&#10;const $ComponentName$: SFC&lt;IProps&gt; = ({ style }: IProps) =&gt; (&#10;  &lt;View style={[styles.container, style]} /&gt;&#10;);&#10;&#10;$ComponentName$.defaultProps = defaultProps;&#10;&#10;export default $ComponentName$;" description="Creates a React Native Stateless Function" toReformat="false" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rncomponent" value="import React, { ReactNode } from 'react';&#10;import { View } from 'react-native';&#10;import { Navigator } from 'react-native-navigation';&#10;&#10;import NavigatorComponent from 'components/NavigatorComponent';&#10;import { statusBarHeight } from 'utils/viewport';&#10;&#10;import styles from './styles';&#10;&#10;interface IProps {&#10;  navigator: Navigator;&#10;}&#10;&#10;export default class $ComponentName$ extends NavigatorComponent {&#10;  static navigatorStyle = {&#10;    statusBarTextColorScheme: 'light',&#10;    navBarHidden: true,&#10;    drawUnderNavBar: true,&#10;&#10;    // Android&#10;    topBarElevationShadowEnabled: false,&#10;    drawUnderStatusBar: true,&#10;    navBarTitleTextCentered: true,&#10;    statusBarColor: 'transparent',&#10;    navBarTopPadding: statusBarHeight,&#10;  };&#10;&#10;  static defaultProps: Partial&lt;IProps&gt; = {}&#10;&#10;  constructor(props: IProps) {&#10;    super(props);&#10;  }&#10;&#10;  componentDidMount(): void {&#10;  }&#10;&#10;  componentWillUnmount(): void {&#10;  }&#10;&#10;  componentDidCatch(error: Error): void {&#10;  }&#10;&#10;  render(): ReactNode {&#10;    return (&#10;      &lt;View style={styles.container}&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;}&#10;" description="Creates a React Native component class" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_CLASS" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rnstyle" value="import { StyleSheet } from 'react-native';&#10;import { Colors, Fonts } from 'constants';&#10;import { getPixel } from 'utils/viewport';&#10;&#10;export default StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;  },&#10;});" description="Creates a React Native Stylesheet" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>